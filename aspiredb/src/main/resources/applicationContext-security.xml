<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:s="http://www.springframework.org/schema/security"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd           
           http://www.springframework.org/schema/aop 
     	   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.0.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-3.0.xsd">	

	<aop:aspectj-autoproxy />	

	<!-- Spring Security configuration -->
	
	<s:http auto-config="true" access-decision-manager-ref="httpAccessDecisionManager">
	
	<s:anonymous granted-authority="GROUP_ANONYMOUS" />

		<s:intercept-url pattern="/**/*.html" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<s:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		
	</s:http>
	
	<!-- works with the HttpSessionEventPublisher configured in web.xml -->
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	
	<bean id="httpAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="true" />
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
				<ref local="roleHierarchyVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</property>
	</bean>

	<s:authentication-manager alias="authenticationManager">
		<s:authentication-provider user-service-ref="userManager">
		 
			<s:password-encoder ref="passwordEncoder">
				<s:salt-source user-property="username" />
			</s:password-encoder>
		
		</s:authentication-provider>
		<s:authentication-provider ref="runAsAuthenticationProvider" />
	</s:authentication-manager>
	
	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />
	
	<bean id="runAsManager" class="org.springframework.security.access.intercept.RunAsManagerImpl">
		<property name="rolePrefix" value="GROUP_" />
		<property name="key" value="aspiredbrunaspassword" />
	</bean>

	<bean id="runAsAuthenticationProvider" class="org.springframework.security.access.intercept.RunAsImplAuthenticationProvider">
		<property name="key" value="aspiredbrunaspassword" />
	</bean>

	<s:global-method-security run-as-manager-ref="runAsManager" secured-annotations="enabled" pre-post-annotations="enabled"
		access-decision-manager-ref="accessDecisionManager" order="1">

		<s:expression-handler ref="securityExpressionHandler" />

		<!-- these filters are declared below -->

		<s:after-invocation-provider ref="afterAclRead" />
		<s:after-invocation-provider ref="afterAclCollectionRead" />
	</s:global-method-security>

	<!-- needed for the use of @Pre... and @Post... -->
	<bean id="securityExpressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<property name="roleHierarchy" ref="roleHierarchy" />
		<property name="permissionEvaluator">
			<bean class="org.springframework.security.acls.AclPermissionEvaluator">
				<constructor-arg>
					<ref local="aclService" />
				</constructor-arg>
				<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy" />
			</bean>
		</property>
	</bean>

	<!-- ===================== VOTING ==================== -->

	<!-- Decide whether the user has access to a particular resource, method, or data -->
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<ref local="securableEditVoter" />
				<ref local="securableReadVoter" />
				<ref local="roleHierarchyVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
				<!-- needed for the use of @Pre.. -->
				<bean class="org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter">
					<constructor-arg>
						<bean class="org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice">
							<property name="expressionHandler" ref="securityExpressionHandler" />
						</bean>
					</constructor-arg>
				</bean>
				<ref local="securableCollectionReadVoter" />
			</list>
		</property>
	</bean>

	<bean id="aclCache" class="org.springframework.security.acls.domain.EhCacheBasedAclCache">
		<constructor-arg>
			<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
				<property name="cacheManager" ref="aclCacheManager" />
				<property name="cacheName" value="aclCache" />
				<!-- diskStore has to be on in ehcache.xml if you want this true -->
				<property name="overflowToDisk" value="false" />
				<property name="timeToLive" value="500" />
				<!-- FIXME add other configuration here. -->
			</bean>
		</constructor-arg>
	</bean>
	<bean id="aclCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" ref="aclCacheConfigResource" />
	</bean>
	<bean id="aclCacheConfigResource" class="org.springframework.core.io.ClassPathResource">
		<constructor-arg name="path" value="/ehcache.xml" />
	</bean>
	
	<!-- role-based voting, in which roles inherit from each other. GROUP_ADMIN has all the rights of GROUP_USER for example. -->
	<bean id="roleHierarchyVoter" class="org.springframework.security.access.vote.RoleHierarchyVoter">
		<constructor-arg>
			<ref local="roleHierarchy" />
		</constructor-arg>
		<property name="rolePrefix" value="GROUP_" />
	</bean>

	<bean id="sidRetrievalStrategy" class="org.springframework.security.acls.domain.SidRetrievalStrategyImpl">
		<constructor-arg>
			<ref local="roleHierarchy" />
		</constructor-arg>
	</bean>

	<!-- Voter that can be applied to any method that takes a securable as an argument (NOT on the return value, this is checked 
		before the call) -->
	<bean id="securableEditVoter" class="org.springframework.security.acls.AclEntryVoter">
		<constructor-arg ref="aclService" />
		<constructor-arg value="ACL_SECURABLE_EDIT" />
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION" />
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE" />
			</list>
		</constructor-arg>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy" />
		<property name="processDomainObjectClass" value="ubc.pavlab.aspiredb.server.model.common.auditAndSecurity.Securable" />
	</bean>

	<bean id="securableReadVoter" class="org.springframework.security.acls.AclEntryVoter">
		<constructor-arg ref="aclService" />
		<constructor-arg value="ACL_SECURABLE_READ" />
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION" />
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ" />
			</list>
		</constructor-arg>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy" />
		<property name="processDomainObjectClass" value="ubc.pavlab.aspiredb.server.model.common.auditAndSecurity.Securable" />
	</bean>

	<bean id="securableCollectionReadVoter" class="ubc.pavlab.aspiredb.server.security.authorization.acl.AclCollectionEntryVoter">
		<constructor-arg ref="aclService" />
		<constructor-arg value="ACL_SECURABLE_COLLECTION_READ" />
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION" />
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ" />
			</list>
		</constructor-arg>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy" />
		<property name="processDomainObjectClass" value="ubc.pavlab.aspiredb.server.model.common.auditAndSecurity.Securable" />
	</bean>

    <bean id="securableCollectionEditVoter" class="ubc.pavlab.aspiredb.server.security.authorization.acl.AclCollectionEntryVoter">
        <constructor-arg ref="aclService" />
        <constructor-arg value="ACL_SECURABLE_COLLECTION_EDIT" />
        <constructor-arg>
            <list>
                <util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION" />
                <util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE" />
            </list>
        </constructor-arg>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy" />
        <property name="processDomainObjectClass" value="ubc.pavlab.aspiredb.server.model.common.auditAndSecurity.Securable" />
    </bean>


	<bean id="roleHierarchy" class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>
			[CDATA[
				GROUP_ADMIN > GROUP_USER
				GROUP_RUN_AS_ADMIN >
				GROUP_ADMIN
				GROUP_USER > GROUP_ANONYMOUS
				GROUP_RUN_AS_USER >
				GROUP_USER
				GROUP_ADMIN > GROUP_AGENT
				GROUP_ANONYMOUS >
				IS_AUTHENTICATED_ANONYMOUSLY
				]]
			</value>
		</property>
	</bean>

	<!-- ACL configuration -->

	<!-- how ACLs are retrived, with configuration of who is allowed to do this -->
	<bean id="lookupStrategy" class="org.springframework.security.acls.jdbc.BasicLookupStrategy">
		<constructor-arg ref="dataSource" />
		<constructor-arg ref="aclCache" />
		<constructor-arg>
			<bean class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
				<constructor-arg>
					<list>
						<bean class="org.springframework.security.core.authority.GrantedAuthorityImpl">
							<constructor-arg value="GROUP_ADMIN" /> <!-- change acl ownership -->
						</bean>
						<bean class="org.springframework.security.core.authority.GrantedAuthorityImpl">
							<constructor-arg value="GROUP_ADMIN" /> <!-- change acl ownership -->
						</bean>
						<bean class="org.springframework.security.core.authority.GrantedAuthorityImpl">
							<constructor-arg value="GROUP_ADMIN" /> <!-- change acl ownership -->
						</bean>
					</list>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="ubc.pavlab.aspiredb.server.security.audit.AclAuditLogger" />
		</constructor-arg>
	</bean>
	<!-- Service that handles CRUD operations on ACLs. -->
	<bean id="aclService" class="ubc.pavlab.aspiredb.server.security.authorization.acl.AclServiceImpl">
		<constructor-arg ref="dataSource" />
		<constructor-arg ref="lookupStrategy" />
		<constructor-arg ref="aclCache" />
		<property name="classIdentityQuery" value="SELECT @@IDENTITY" /> <!-- for mysql -->
		<property name="sidIdentityQuery" value="SELECT @@IDENTITY" />
	</bean>

	<!-- Aspect that adds ACLs for new entities, and deletes them for deleted entities. -->
	<aop:config>
		<aop:aspect id="aclAspect" ref="aclAdvice" order="4">
			<aop:after-returning method="doAclAdvice" pointcut="ubc.pavlab.aspiredb.server.util.SystemArchitectureAspect.modifier()"
				returning="retValue" />
		</aop:aspect>
	</aop:config>

	<!-- After reading an object filter. Throws an exception when access is denied (AFTER_ACL_READ) -->
	<bean id="afterAclRead" class="org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationProvider">
		<constructor-arg ref="aclService" />
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION" />
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ" />
			</list>
		</constructor-arg>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy" />
		<property name="processDomainObjectClass" value="ubc.pavlab.aspiredb.server.model.common.auditAndSecurity.Securable" />
	</bean>

	<!-- after reading a collection filter: remove unallowed objects -->
	<bean id="afterAclCollectionRead" class="org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider">
		<constructor-arg ref="aclService" />
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION" />
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ" />
			</list>
		</constructor-arg>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy" />
		<property name="processDomainObjectClass" value="ubc.pavlab.aspiredb.server.model.common.auditAndSecurity.Securable" />
	</bean>

	<!-- needed for the use of @Post.. -->
	<bean id="postInvocationAdviceProvider" class="org.springframework.security.access.prepost.PostInvocationAdviceProvider">
		<constructor-arg>
			<bean class="org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice">
				<constructor-arg ref="securityExpressionHandler" />
			</bean>
		</constructor-arg>
	</bean>

</beans>